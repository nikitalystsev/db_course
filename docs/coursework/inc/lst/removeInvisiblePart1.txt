void Renderer::_renderPlane(const Plane &screenPlane, const vector<double> &heights, const vector<double> &intensity, const double waterlevel, const double maxHeight)
{
    double yMin = screenPlane.getPMin().y();
    double уMax = screenPlane.getPMax().y();
    double a = screenPlane.getA(), c = screenPlane.getC();
    vector<Pixel> line1 = this->_getLineByBresenham(screenPlane.getP1(), screenPlane.getP2());
    vector<Pixel> line2 = this->_getLineByBresenham(screenPlane.getP2(), screenPlane.getP3());
    vector<Pixel> line3 = this->_getLineByBresenham(screenPlane.getP3(), screenPlane.getP1());

    this->_calcParamsLine(line1, intensity[0], intensity[1], heights[0], heights[1]);
    this->_calcParamsLine(line2, intensity[1], intensity[2], heights[1], heights[2]);
    this->_calcParamsLine(line3, intensity[2], intensity[0], heights[2], heights[0]);

    vector<Pixel> allLines;
    allLines.insert(allLines.end(), line1.begin(), line1.end());
    allLines.insert(allLines.end(), line2.begin(), line2.end());
    allLines.insert(allLines.end(), line3.begin(), line3.end());

    for (int y = yMin; y <= уMax; ++y)
    {
        vector<Pixel> yn;
        std::copy_if(allLines.begin(), allLines.end(), std::back_inserter(yn), [y](const Pixel &point)
                     { return point.vec.y() == y; });
